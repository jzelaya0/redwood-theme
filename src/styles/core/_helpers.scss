.clearfix {
  @include clearfix;
}

.visually-hidden {
  @include visually-hidden;
}

.js-focus-hidden:focus {
  outline: none;
}

.label-hidden {
  @include visually-hidden;

  // No placeholders, so force show labels
  .no-placeholder & {
    @include visually-shown;
  }
}

.visually-shown {
  @include visually-shown;
}

// Only show when JS is not supported
.no-js:not(html) {
  display: none;

  .no-js & {
    display: block;
  }
}

// Only show when JS is supported
.js {

  .no-js & {
    display: none;
  }
}

// Only show when browser cookies are not supported
.supports-no-cookies:not(html) {
  display: none;

  html.supports-no-cookies & {
    display: block;
  }
}

// Only show when browser cookies are supported
.supports-cookies {

  html.supports-no-cookies & {
    display: none;
  }
}

// Skip to content button
// Overrides .visually-hidden when focused
.skip-link:focus {
  @include visually-shown(absolute);
  z-index: 10000;
  padding: $grid-gutter / 2;
  background-color: $color-body;
  color: $color-body-text;
  transition: none;
}

// Layout
.full-width {
  display: block;
  width: 100%;
}

/***************** Flex Helper Classes *****************/
// Flex displays
.flex {
  display: flex;
}

.flex-inline {
  display: inline-flex;
}

// Flex row & direction properites
.flex-wrap {
  flex-wrap: wrap;
}

.flex-wrap-reverse {
  flex-wrap: wrap-reverse;
}

.flex-direction-column {
  flex-direction: column;
}

.flex-direction-column-reverse {
  flex-direction: column-reverse;
}

.flex-direction-row {
  flex-direction: row;
}

.flex-direction-row-reverse {
  flex-direction: row-reverse;
}

// Flex justify
.justify-content-start {
  justify-content: start;
}

.justify-content-center {
  justify-content: center;
}

.justify-content-around {
  justify-content: space-around;
}

.justify-content-between {
  justify-content: space-between;
}

.justify-content-end {
  justify-content: flex-end;
}

// Flex align items
.align-items-start {
  align-items: flex-start;
}

.align-items-stretch {
  align-items: stretch;
}

.align-items-center {
  align-items: center;
}

.align-items-end {
  align-items: flex-end;
}

.align-items-baseline {
  align-items: baseline;
}

// Flex align self
.align-self-auto {
  align-self: auto;
}

.align-self-start {
  align-self: flex-start;
}

.align-self-stretch {
  align-self: stretch;
}

.align-self-center {
  align-self: center;
}

.align-self-end {
  align-self: flex-end;
}

.align-self-baseline {
  align-self: baseline;
}

// Flex align content
.align-content-start {
  align-content: start;
}

.align-content-between {
  align-content: space-between;
}

.align-content-around {
  align-content: space-around;
}

.align-content-stretch {
  align-content: stretch;
}

.align-content-end {
  align-content: flex-end;
}

// Text transforms
.text-uppercase {
  text-transform: uppercase;
}

.text-capitalize {
  text-transform: capitalize;
}

.text-lowercase {
  text-transform: lowercase;
}

// Text weights
.text-normal {
  font-weight: $font-weight-normal;
}

.text-bold {
  font-weight: $font-weight-bold;
}

// Text styles
.text-italic {
  font-style: italic;
}

.text-underline {
  text-decoration: underline;
}

.text-regular {
  font-style: normal;
}

// Margin/Padding spacing helper classes
@each $type in $spacing-data {
  $i: index($spacing-data, $type) - 1;
  $space: nth($type, 1);
  $sides: (top, bottom, left, right);

  @each $side in $sides {

    .m#{str-slice($side, 0, 1)}-#{$i} {
      margin-#{$side}: spacing($i);
    }

    .p#{str-slice($side, 0, 1)}-#{$i} {
      padding-#{$side}: spacing($i);
    }
  }
}

// Build Responsive Helper Classes
@include responsive-display-helper('');
@include responsive-text-align-helper('');

@each $breakpoint in $breakpoint-has-widths {
  @include media-query($breakpoint) {
    @include responsive-display-helper('--#{$breakpoint}');
    @include responsive-text-align-helper('--#{$breakpoint}');
  }
}
